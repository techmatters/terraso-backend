name: build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

jobs:
  build:
    # We build the base image that only contains OS and and push it to Docker Hub so that we don't have to perform a long
    # build process for every Run.
    runs-on: ubuntu-latest

    env:
      IMAGE_BASE: techmatters/terraso-backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # We only want to attempt to build the base image if the dependencies have changed
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            Dockerfile.base
            requirements.txt
            makefiles/docker.make
            makefiles/install.make

      - name: Set base image var
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "BASE_IMAGE=${{ env.IMAGE_BASE }}:staging-base" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
            echo "BASE_IMAGE=${{ env.IMAGE_BASE }}:pr-${{ github.event.pull_request.number }}-base" >> $GITHUB_ENV
          else
            echo "BASE_IMAGE=${{ env.IMAGE_BASE }}:latest-base" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: steps.changed-files.outputs.any_changed == 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: steps.changed-files.outputs.any_changed == 'true'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        if: steps.changed-files.outputs.any_changed == 'true'
        run: make push_base BASE_IMAGE=${{ BASE_IMAGE }} PLATFORMS=linux/amd64

      - name: Set App and Dev image vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "APP_IMAGE=${{ env.IMAGE_BASE }}:staging" >> $GITHUB_ENV
            echo "DEV_IMAGE=${{ env.IMAGE_BASE }}:staging-dev" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "APP_IMAGE=${{ env.IMAGE_BASE }}:pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "DEV_IMAGE=${{ env.IMAGE_BASE }}:pr-${{ github.event.pull_request.number }}-dev" >> $GITHUB_ENV
          else
            echo "APP_IMAGE=${{ env.IMAGE_BASE }}:latest" >> $GITHUB_ENV
            echo "DEV_IMAGE=${{ env.IMAGE_BASE }}:latest-dev" >> $GITHUB_ENV
          fi

      - name: Build and push App and Dev images to Docker Hub
        run: make push_app push_dev APP_IMAGE=${{ env.APP_IMAGE }} BASE_IMAGE=${{ env.BASE_IMAGE }} DEV_IMAGE=${{ env.DEV_IMAGE }} PLATFORMS=linux/amd64

      - name: Set dev image output
        id: set-app-tag
        run: |
          echo "::set-output name=dev_image::${{ env.DEV_IMAGE }}"

  lint:
    runs-on: ubuntu-latest
    needs: build

    env:
      DEV_IMAGE: ${{ needs.build.outputs.dev_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.2"

      - name: Install Python dependencies for CI
        run: |
          pip install -r requirements-dev.txt

      - name: Run lint checks
        run: SENTRY_DSN=${{ secrets.SENTRY_DSN }} make lint

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build base Docker image
        run: |
          cp .env.sample .env.ci
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env.ci

      - name: Run tests using built Docker image
        run: |
          make test-ci DC_ENV=ci
