# Generated by Django 5.2.6 on 2025-09-23 19:03

import django.db.models.deletion
import rules.contrib.models
import uuid
from django.db import migrations, models

def update_rows(apps, schema_editor):
    # Read the old selected_soil_id
    # Set that soil id to SELECTED in the new field
    SoilMetadata = apps.get_model("soil_id", "SoilMetadata")
    UserMatchRating = apps.get_model("soil_id", "UserMatchRating")

    for soil_metadata in SoilMetadata.objects.all():
        old_selected_soil_id = soil_metadata.selected_soil_id
        if (old_selected_soil_id):
            UserMatchRating.objects.create(
                soil_metadata=soil_metadata,
                match_id=old_selected_soil_id,
                user_rating="SELECTED"
            )

def reverse_update_rows(apps, schema_editor):
    # In case of migration rollback - delete the new UserMatchRating records
    UserMatchRating = apps.get_model("soil_id", "UserMatchRating")
    UserMatchRating.objects.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('soil_id', '0022_soilidcache_data_region'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserMatchRating',
            fields=[
                ('deleted_at', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match_id', models.TextField()),
                ('user_rating', models.CharField(choices=[('SELECTED', 'Selected'), ('REJECTED', 'Rejected'), ('UNSURE', 'Unsure')], default='UNSURE')),
                ('soil_metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_match_ratings', to='soil_id.soilmetadata')),
            ],
            options={
                'ordering': ['created_at'],
                'get_latest_by': '-created_at',
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),

        migrations.RunPython(code=update_rows, reverse_code=reverse_update_rows)
    ]
