schema {
  query: Query
  mutation: Mutations
}

type Query {
  group(
    """The ID of the object"""
    id: ID!
  ): GroupNode!
  landscape(
    """The ID of the object"""
    id: ID!
  ): LandscapeNode!
  user(
    """The ID of the object"""
    id: ID!
  ): UserNode!
  landscapeGroup(
    """The ID of the object"""
    id: ID!
  ): LandscapeGroupNode!
  membership(
    """The ID of the object"""
    id: ID!
  ): MembershipNode!
  groupAssociation(
    """The ID of the object"""
    id: ID!
  ): GroupAssociationNode!
  groups(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, slug: String, slug_Icontains: String, description_Icontains: String, memberships_Email: String, associatedLandscapes_IsDefaultLandscapeGroup: Boolean, associatedLandscapes_Isnull: Boolean, associatedLandscapes_IsPartnership: Boolean): GroupNodeConnection
  landscapes(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, description_Icontains: String, slug: String, slug_Icontains: String, website_Icontains: String, location_Icontains: String): LandscapeNodeConnection
  users(offset: Int, before: String, after: String, first: Int, last: Int, email: String, email_Icontains: String, email_Iexact: String, firstName_Icontains: String, lastName_Icontains: String, project: String): UserNodeConnection
  landscapeGroups(offset: Int, before: String, after: String, first: Int, last: Int, landscape: ID, landscape_Slug_Icontains: String, group: ID, group_Slug_Icontains: String, isDefaultLandscapeGroup: Boolean, isPartnership: Boolean): LandscapeGroupNodeConnection
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, group: ID, group_In: [ID], group_Slug_Icontains: String, group_Slug_In: [String], user: ID, user_In: [ID], userRole: CoreMembershipUserRoleChoices, user_Email_Icontains: String, user_Email_In: [String], membershipStatus: CoreMembershipMembershipStatusChoices): MembershipNodeConnection
  groupAssociations(offset: Int, before: String, after: String, first: Int, last: Int, parentGroup: ID, childGroup: ID, parentGroup_Slug_Icontains: String, childGroup_Slug_Icontains: String): GroupAssociationNodeConnection
  dataEntry(
    """The ID of the object"""
    id: ID!
  ): DataEntryNode!
  dataEntries(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, description_Icontains: String, url_Icontains: String, entryType_In: [SharedDataDataEntryEntryTypeChoices], resourceType_In: [String], groups_Slug: String, groups_Slug_Icontains: String, groups_Id: ID): DataEntryNodeConnection
  visualizationConfig(
    """The ID of the object"""
    id: ID!
  ): VisualizationConfigNode!
  visualizationConfigs(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, dataEntry_Groups_Slug: String, dataEntry_Groups_Slug_Icontains: String, dataEntry_Groups_Id: ID): VisualizationConfigNodeConnection
  taxonomyTerm(
    """The ID of the object"""
    id: ID!
  ): TaxonomyTermNode!
  taxonomyTerms(offset: Int, before: String, after: String, first: Int, last: Int, type: CoreTaxonomyTermTypeChoices, type_In: [CoreTaxonomyTermTypeChoices]): TaxonomyTermNodeConnection
  storyMap(
    """The ID of the object"""
    id: ID!
  ): StoryMapNode!
  storyMaps(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, storyMapId: String, memberships_User_Email_Not: String, memberships_User_Email: String): StoryMapNodeConnection
  project(
    """The ID of the object"""
    id: ID!
  ): ProjectNode!
  projects(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, member: ID): ProjectNodeConnection!
  site(
    """The ID of the object"""
    id: ID!
  ): SiteNode!
  sites(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    name: String
    archived: Boolean
    project: ID
    owner: ID
    project_Member: ID

    """Ordering"""
    orderBy: String
  ): SiteNodeConnection!
  auditLogs(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    clientTimestamp: DateTime
    user_Id: ID
    event: AuditLogsLogEventChoices
    resourceId: UUID
    resourceContentType_Model: String
    resourceContentType: ID

    """Ordering"""
    orderBy: String
  ): AuditLogNodeConnection
}

type GroupNode implements Node {
  slug: String!
  name: String!
  description: String!
  website: String!
  email: String!
  createdBy: UserNode
  membershipType: CoreGroupMembershipTypeChoices!
  associationsAsParent(offset: Int, before: String, after: String, first: Int, last: Int, parentGroup: ID, childGroup: ID, parentGroup_Slug_Icontains: String, childGroup_Slug_Icontains: String): GroupAssociationNodeConnection!
  associationsAsChild(offset: Int, before: String, after: String, first: Int, last: Int, parentGroup: ID, childGroup: ID, parentGroup_Slug_Icontains: String, childGroup_Slug_Icontains: String): GroupAssociationNodeConnection!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, group: ID, group_In: [ID], group_Slug_Icontains: String, group_Slug_In: [String], user: ID, user_In: [ID], userRole: CoreMembershipUserRoleChoices, user_Email_Icontains: String, user_Email_In: [String], membershipStatus: CoreMembershipMembershipStatusChoices): MembershipNodeConnection!
  associatedLandscapes(offset: Int, before: String, after: String, first: Int, last: Int, landscape: ID, landscape_Slug_Icontains: String, group: ID, group_Slug_Icontains: String, isDefaultLandscapeGroup: Boolean, isPartnership: Boolean): LandscapeGroupNodeConnection!
  dataEntries(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, description_Icontains: String, url_Icontains: String, entryType_In: [SharedDataDataEntryEntryTypeChoices], resourceType_In: [String], groups_Slug: String, groups_Slug_Icontains: String, groups_Id: ID): DataEntryNodeConnection!
  id: ID!
  accountMembership: MembershipNode
  membershipsCount: Int
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type UserNode implements Node {
  firstName: String!
  lastName: String!
  email: String!
  profileImage: String!
  preferences(offset: Int, before: String, after: String, first: Int, last: Int): UserPreferenceNodeConnection!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, group: ID, group_In: [ID], group_Slug_Icontains: String, group_Slug_In: [String], user: ID, user_In: [ID], userRole: CoreMembershipUserRoleChoices, user_Email_Icontains: String, user_Email_In: [String], membershipStatus: CoreMembershipMembershipStatusChoices): MembershipNodeConnection!
  id: ID!
}

type UserPreferenceNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserPreferenceNodeEdge!]!
  totalCount: Int!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `UserPreferenceNode` and its cursor."""
type UserPreferenceNodeEdge {
  """The item at the end of the edge"""
  node: UserPreferenceNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type UserPreferenceNode implements Node {
  key: String!
  value: String!
  user: UserNode!
  id: ID!
}

type MembershipNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MembershipNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `MembershipNode` and its cursor."""
type MembershipNodeEdge {
  """The item at the end of the edge"""
  node: MembershipNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type MembershipNode implements Node {
  group: GroupNode!
  user: UserNode!
  userRole: CoreMembershipUserRoleChoices!
  membershipStatus: CoreMembershipMembershipStatusChoices!
  id: ID!
}

"""An enumeration."""
enum CoreMembershipUserRoleChoices {
  """Manager"""
  MANAGER

  """Member"""
  MEMBER
}

"""An enumeration."""
enum CoreMembershipMembershipStatusChoices {
  """Approved"""
  APPROVED

  """Pending"""
  PENDING
}

"""An enumeration."""
enum CoreGroupMembershipTypeChoices {
  """Open"""
  OPEN

  """Closed"""
  CLOSED
}

type GroupAssociationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [GroupAssociationNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `GroupAssociationNode` and its cursor."""
type GroupAssociationNodeEdge {
  """The item at the end of the edge"""
  node: GroupAssociationNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type GroupAssociationNode implements Node {
  parentGroup: GroupNode!
  childGroup: GroupNode!
  id: ID!
}

type LandscapeGroupNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LandscapeGroupNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `LandscapeGroupNode` and its cursor."""
type LandscapeGroupNodeEdge {
  """The item at the end of the edge"""
  node: LandscapeGroupNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type LandscapeGroupNode implements Node {
  landscape: LandscapeNode!
  group: GroupNode!
  isDefaultLandscapeGroup: Boolean!
  isPartnership: Boolean!
  partnershipYear: Int
  id: ID!
}

type LandscapeNode implements Node {
  slug: String!
  name: String!
  description: String!
  website: String!
  location: String!
  areaPolygon: JSONString
  email: String!
  areaScalarM2: Float
  createdBy: UserNode
  taxonomyTerms(offset: Int, before: String, after: String, first: Int, last: Int, type: CoreTaxonomyTermTypeChoices, type_In: [CoreTaxonomyTermTypeChoices]): TaxonomyTermNodeConnection!
  population: Int
  partnershipStatus: CoreLandscapePartnershipStatusChoices
  profileImage: String!
  profileImageDescription: String!
  centerCoordinates: Point
  associatedDevelopmentStrategy(offset: Int, before: String, after: String, first: Int, last: Int): LandscapeDevelopmentStrategyNodeConnection!
  associatedGroups(offset: Int, before: String, after: String, first: Int, last: Int, landscape: ID, landscape_Slug_Icontains: String, group: ID, group_Slug_Icontains: String, isDefaultLandscapeGroup: Boolean, isPartnership: Boolean): LandscapeGroupNodeConnection!
  id: ID!
  areaTypes: [String]
  defaultGroup: GroupNode
  areaScalarHa: Float
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type TaxonomyTermNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TaxonomyTermNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `TaxonomyTermNode` and its cursor."""
type TaxonomyTermNodeEdge {
  """The item at the end of the edge"""
  node: TaxonomyTermNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type TaxonomyTermNode implements Node {
  slug: String!
  valueOriginal: String!
  valueEs: String!
  valueEn: String!
  type: CoreTaxonomyTermTypeChoices!
  id: ID!
}

"""An enumeration."""
enum CoreTaxonomyTermTypeChoices {
  """Ecosystem Type"""
  ECOSYSTEM_TYPE

  """Language"""
  LANGUAGE

  """Livelihood"""
  LIVELIHOOD

  """Commodity"""
  COMMODITY

  """Organization"""
  ORGANIZATION

  """Agricultural Production Method"""
  AGRICULTURAL_PRODUCTION_METHOD
}

"""An enumeration."""
enum CoreLandscapePartnershipStatusChoices {
  """None"""
  A_

  """No"""
  NO

  """In Progress"""
  IN_PROGRESS

  """Yes"""
  YES
}

type Point {
  lat: Float
  lng: Float
}

type LandscapeDevelopmentStrategyNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LandscapeDevelopmentStrategyNodeEdge!]!
  totalCount: Int!
}

"""
A Relay edge containing a `LandscapeDevelopmentStrategyNode` and its cursor.
"""
type LandscapeDevelopmentStrategyNodeEdge {
  """The item at the end of the edge"""
  node: LandscapeDevelopmentStrategyNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type LandscapeDevelopmentStrategyNode implements Node {
  objectives: String!
  opportunities: String!
  problemSitutation: String!
  interventionStrategy: String!
  id: ID!
}

type DataEntryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DataEntryNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `DataEntryNode` and its cursor."""
type DataEntryNodeEdge {
  """The item at the end of the edge"""
  node: DataEntryNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type DataEntryNode implements Node {
  createdAt: DateTime!
  name: String!
  description: String!
  entryType: SharedDataDataEntryEntryTypeChoices!
  resourceType: String!
  url: String!

  """"""
  size: BigInt
  groups(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, slug: String, slug_Icontains: String, description_Icontains: String, memberships_Email: String, associatedLandscapes_IsDefaultLandscapeGroup: Boolean, associatedLandscapes_Isnull: Boolean, associatedLandscapes_IsPartnership: Boolean): GroupNodeConnection!
  createdBy: UserNode
  visualizations(offset: Int, before: String, after: String, first: Int, last: Int, slug: String, slug_Icontains: String, dataEntry_Groups_Slug: String, dataEntry_Groups_Slug_Icontains: String, dataEntry_Groups_Id: ID): VisualizationConfigNodeConnection!
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An enumeration."""
enum SharedDataDataEntryEntryTypeChoices {
  """File"""
  FILE

  """Link"""
  LINK
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

type GroupNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [GroupNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `GroupNode` and its cursor."""
type GroupNodeEdge {
  """The item at the end of the edge"""
  node: GroupNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type VisualizationConfigNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [VisualizationConfigNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `VisualizationConfigNode` and its cursor."""
type VisualizationConfigNodeEdge {
  """The item at the end of the edge"""
  node: VisualizationConfigNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type VisualizationConfigNode implements Node {
  id: ID!
  createdAt: DateTime!
  slug: String!
  title: String!
  configuration: JSONString
  createdBy: UserNode
  mapboxTilesetId: String
  dataEntry: DataEntryNode!
  group: GroupNode!
}

type LandscapeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LandscapeNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `LandscapeNode` and its cursor."""
type LandscapeNodeEdge {
  """The item at the end of the edge"""
  node: LandscapeNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type StoryMapNode implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  storyMapId: String!
  title: String!
  configuration: JSONString
  createdBy: UserNode
  isPublished: Boolean!
  publishedAt: DateTime
  membershipList: CollaborationMembershipListNode
}

type CollaborationMembershipListNode implements Node {
  membershipType: CollaborationMembershipListMembershipTypeChoices!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_In: [ID], userRole: String, user_Email_Icontains: String, user_Email_In: [String], membershipStatus: CollaborationMembershipMembershipStatusChoices, user_Email_Not: String): CollaborationMembershipNodeConnection!
  id: ID!
  accountMembership: CollaborationMembershipNode
  membershipsCount: Int
}

"""An enumeration."""
enum CollaborationMembershipListMembershipTypeChoices {
  """Open"""
  OPEN

  """Closed"""
  CLOSED
}

type CollaborationMembershipNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CollaborationMembershipNodeEdge!]!
  totalCount: Int!
}

"""
A Relay edge containing a `CollaborationMembershipNode` and its cursor.
"""
type CollaborationMembershipNodeEdge {
  """The item at the end of the edge"""
  node: CollaborationMembershipNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type CollaborationMembershipNode implements Node {
  membershipList: CollaborationMembershipListNode!
  user: UserNode
  userRole: String!
  membershipStatus: CollaborationMembershipMembershipStatusChoices!
  pendingEmail: String
  id: ID!
}

"""An enumeration."""
enum CollaborationMembershipMembershipStatusChoices {
  """Approved"""
  APPROVED

  """Pending"""
  PENDING
}

type StoryMapNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StoryMapNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `StoryMapNode` and its cursor."""
type StoryMapNodeEdge {
  """The item at the end of the edge"""
  node: StoryMapNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type ProjectNode implements Node {
  updatedAt: DateTime!
  name: String!
  description: String!
  membershipList: ProjectMembershipListNode!
  privacy: ProjectManagementProjectPrivacyChoices!
  archived: Boolean!
  siteSet(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    name: String
    archived: Boolean
    project: ID
    owner: ID
    project_Member: ID

    """Ordering"""
    orderBy: String
  ): SiteNodeConnection!
  id: ID!
  seen: Boolean!
  soilSettings: ProjectSoilSettingsNode!
}

type ProjectMembershipListNode implements Node {
  membershipType: CollaborationMembershipListMembershipTypeChoices!
  memberships(offset: Int, before: String, after: String, first: Int, last: Int, user: ID, user_In: [ID], userRole: String, user_Email_Icontains: String, user_Email_In: [String], membershipStatus: CollaborationMembershipMembershipStatusChoices, user_Email_Not: String): ProjectMembershipNodeConnection!
  id: ID!
  accountMembership: CollaborationMembershipNode
  membershipsCount: Int
}

type ProjectMembershipNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectMembershipNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `ProjectMembershipNode` and its cursor."""
type ProjectMembershipNodeEdge {
  """The item at the end of the edge"""
  node: ProjectMembershipNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type ProjectMembershipNode implements Node {
  membershipList: CollaborationMembershipListNode!
  user: UserNode!
  userRole: UserRole!
  membershipStatus: CollaborationMembershipMembershipStatusChoices!
  pendingEmail: String
  id: ID!
}

enum UserRole {
  viewer
  contributor
  manager
}

"""An enumeration."""
enum ProjectManagementProjectPrivacyChoices {
  """Private"""
  PRIVATE

  """Public"""
  PUBLIC
}

type SiteNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SiteNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `SiteNode` and its cursor."""
type SiteNodeEdge {
  """The item at the end of the edge"""
  node: SiteNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type SiteNode implements Node {
  name: String!
  latitude: Float!
  longitude: Float!
  updatedAt: DateTime!
  owner: UserNode
  privacy: ProjectManagementSitePrivacyChoices!
  project: ProjectNode
  archived: Boolean!
  id: ID!
  seen: Boolean!
  soilData: SoilDataNode!
}

"""An enumeration."""
enum ProjectManagementSitePrivacyChoices {
  """Private"""
  PRIVATE

  """Public"""
  PUBLIC
}

type SoilDataNode {
  site: SiteNode!
  downSlope: SoilIdSoilDataDownSlopeChoices
  crossSlope: SoilIdSoilDataCrossSlopeChoices
  bedrock: Int
  slopeLandscapePosition: SoilIdSoilDataSlopeLandscapePositionChoices
  slopeAspect: Int
  slopeSteepnessSelect: SoilIdSoilDataSlopeSteepnessSelectChoices
  slopeSteepnessPercent: Int
  slopeSteepnessDegree: Int
  surfaceCracksSelect: SoilIdSoilDataSurfaceCracksSelectChoices
  surfaceSaltSelect: SoilIdSoilDataSurfaceSaltSelectChoices
  floodingSelect: SoilIdSoilDataFloodingSelectChoices
  limeRequirementsSelect: SoilIdSoilDataLimeRequirementsSelectChoices
  surfaceStoninessSelect: SoilIdSoilDataSurfaceStoninessSelectChoices
  waterTableDepthSelect: SoilIdSoilDataWaterTableDepthSelectChoices
  soilDepthSelect: SoilIdSoilDataSoilDepthSelectChoices
  landCoverSelect: SoilIdSoilDataLandCoverSelectChoices
  grazingSelect: SoilIdSoilDataGrazingSelectChoices
  depthIntervals: [SoilDataDepthIntervalNode!]!
  depthDependentData: [DepthDependentSoilDataNode!]!
}

"""An enumeration."""
enum SoilIdSoilDataDownSlopeChoices {
  """Concave"""
  CONCAVE

  """Convex"""
  CONVEX

  """Linear"""
  LINEAR
}

"""An enumeration."""
enum SoilIdSoilDataCrossSlopeChoices {
  """Concave"""
  CONCAVE

  """Convex"""
  CONVEX

  """Linear"""
  LINEAR
}

"""An enumeration."""
enum SoilIdSoilDataSlopeLandscapePositionChoices {
  """Hills/Mountains"""
  HILLS_MOUNTAINS

  """Hills/Mountains (Summit)"""
  HILLS_MOUNTAINS_SUMMIT

  """Hills/Mountains (Shoulder)"""
  HILLS_MOUNTAINS_SHOULDER

  """Hills/Mountains (Backslope)"""
  HILLS_MOUNTAINS_BACKSLOPE

  """Alluvial Fan"""
  ALLUVIAL_FAN

  """Floodplain/Basin"""
  FLOODPLAIN_BASIN

  """Terrace"""
  TERRACE

  """Terrace (Tread)"""
  TERRACE_TREAD

  """Terrace (Riser)"""
  TERRACE_RISER

  """Flat/Low Rolling Plain"""
  FLAT_LOW_ROLLING_PLAIN

  """Playa"""
  PLAYA

  """Dunes"""
  DUNES
}

"""An enumeration."""
enum SoilIdSoilDataSlopeSteepnessSelectChoices {
  """0 - 2% (flat)"""
  FLAT

  """2 - 5% (gentle)"""
  GENTLE

  """5 - 10% (moderate)"""
  MODERATE

  """10 - 15% (rolling)"""
  ROLLING

  """15 - 30% (hilly)"""
  HILLY

  """30 - 50% (steep)"""
  STEEP

  """50 - 60% (moderately steep)"""
  MODERATELY_STEEP

  """60 - 100% (very steep)"""
  VERY_STEEP

  """100%+ (steepest)"""
  STEEPEST
}

"""An enumeration."""
enum SoilIdSoilDataSurfaceCracksSelectChoices {
  """No cracking"""
  NO_CRACKING

  """Surface cracking only"""
  SURFACE_CRACKING_ONLY

  """Deep vertical cracks"""
  DEEP_VERTICAL_CRACKS
}

"""An enumeration."""
enum SoilIdSoilDataSurfaceSaltSelectChoices {
  """No salt"""
  NO_SALT

  """Small, temporary patches"""
  SMALL_TEMPORARY_PATCHES

  """Yes, most of surface"""
  MOST_OF_SURFACE
}

"""An enumeration."""
enum SoilIdSoilDataFloodingSelectChoices {
  """None"""
  NONE

  """Rare to occasional"""
  RARE

  """Occasional"""
  OCCASIONAL

  """Frequent"""
  FREQUENT

  """Very frequent"""
  VERY_FREQUENT
}

"""An enumeration."""
enum SoilIdSoilDataLimeRequirementsSelectChoices {
  """Little or no lime required"""
  LITTLE_OR_NO

  """Some amounts of lime required"""
  SOME

  """High amounts of lime required"""
  HIGH

  """Very difficult to modify with lime"""
  VERY_DIFFICULT
}

"""An enumeration."""
enum SoilIdSoilDataSurfaceStoninessSelectChoices {
  """< 0.1%"""
  LESS_THAN_01

  """0.1 to 3%"""
  BETWEEN_01_AND_3

  """3 to 15%"""
  BETWEEN_3_AND_15

  """15 to 50%"""
  BETWEEN_15_AND_50

  """50 - 90%"""
  BETWEEN_50_AND_90

  """> 90%"""
  GREATER_THAN_90
}

"""An enumeration."""
enum SoilIdSoilDataWaterTableDepthSelectChoices {
  """Not found"""
  NOT_FOUND

  """<30 cm"""
  LESS_THAN_30_CM

  """30 to 45 cm"""
  BETWEEN_30_AND_45_CM

  """45 to 75 cm"""
  BETWEEN_45_AND_75_CM

  """75 to 120 cm"""
  BETWEEN_75_AND_120_CM

  """> 120 cm"""
  GREATER_THAN_120_CM
}

"""An enumeration."""
enum SoilIdSoilDataSoilDepthSelectChoices {
  """Not found"""
  NOT_FOUND

  """20 cm or less"""
  TWENTY_CM_OR_LESS

  """Greater than 20 and less than 50 cm"""
  GREATER_THAN_20_LESS_THAN_50_CM

  """Between 50 and 70 cm"""
  BETWEEN_50_AND_70_CM

  """Greater than 70 and less than 100 cm"""
  GREATER_THAN_70_LESS_THAN_100_CM

  """100 cm or greater"""
  HUNDRED_CM_OR_GREATER
}

"""An enumeration."""
enum SoilIdSoilDataLandCoverSelectChoices {
  """Forest"""
  FOREST

  """Shrubland"""
  SHRUBLAND

  """Grassland"""
  GRASSLAND

  """Savanna"""
  SAVANNA

  """Garden"""
  GARDEN

  """Cropland"""
  CROPLAND

  """Village or City"""
  VILLAGE_OR_CITY

  """Barren, no vegetation or structures"""
  BARREN

  """Water"""
  WATER
}

"""An enumeration."""
enum SoilIdSoilDataGrazingSelectChoices {
  """Not Grazed"""
  NOT_GRAZED

  """Cattle"""
  CATTLE

  """Horse"""
  HORSE

  """Goat"""
  GOAT

  """Sheep"""
  SHEEP

  """Pig"""
  PIG

  """Camel"""
  CAMEL

  """Wildlife (forest, deer)"""
  WILDLIFE_FOREST

  """Wildlife (grasslands, giraffes, ibex)"""
  WILDLIFE_GRASSLANDS
}

type SoilDataDepthIntervalNode {
  label: String!
  soilTextureEnabled: Boolean!
  soilColorEnabled: Boolean!
  carbonatesEnabled: Boolean!
  phEnabled: Boolean!
  soilOrganicCarbonMatterEnabled: Boolean!
  electricalConductivityEnabled: Boolean!
  sodiumAdsorptionRatioEnabled: Boolean!
  soilStructureEnabled: Boolean!
  site: SiteNode!
  depthInterval: DepthInterval!
}

type DepthInterval {
  start: Int!
  end: Int!
}

type DepthDependentSoilDataNode {
  texture: SoilIdDepthDependentSoilDataTextureChoices
  rockFragmentVolume: SoilIdDepthDependentSoilDataRockFragmentVolumeChoices
  colorHueSubstep: SoilIdDepthDependentSoilDataColorHueSubstepChoices
  colorHue: SoilIdDepthDependentSoilDataColorHueChoices
  colorValue: SoilIdDepthDependentSoilDataColorValueChoices
  colorChroma: SoilIdDepthDependentSoilDataColorChromaChoices
  conductivity: Decimal
  conductivityTest: SoilIdDepthDependentSoilDataConductivityTestChoices
  conductivityUnit: SoilIdDepthDependentSoilDataConductivityUnitChoices
  structure: SoilIdDepthDependentSoilDataStructureChoices
  ph: Decimal
  phTestingSolution: SoilIdDepthDependentSoilDataPhTestingSolutionChoices
  phTestingMethod: SoilIdDepthDependentSoilDataPhTestingMethodChoices
  soilOrganicCarbon: Decimal
  soilOrganicMatter: Decimal
  soilOrganicCarbonTesting: SoilIdDepthDependentSoilDataSoilOrganicCarbonTestingChoices
  soilOrganicMatterTesting: SoilIdDepthDependentSoilDataSoilOrganicMatterTestingChoices
  sodiumAbsorptionRatio: Decimal
  carbonates: SoilIdDepthDependentSoilDataCarbonatesChoices
  site: SiteNode!
  depthInterval: DepthInterval!
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataTextureChoices {
  """Sand"""
  SAND

  """Loamy Sand"""
  LOAMY_SAND

  """Sandy Loam"""
  SANDY_LOAM

  """Silt Loam"""
  SILT_LOAM

  """Silt"""
  SILT

  """Loam"""
  LOAM

  """Sandy Clay Loam"""
  SANDY_CLAY_LOAM

  """Silty Clay Loam"""
  SILTY_CLAY_LOAM

  """Clay Loam"""
  CLAY_LOAM

  """Sandy Clay"""
  SANDY_CLAY

  """Silty Clay"""
  SILTY_CLAY

  """Clay"""
  CLAY
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataRockFragmentVolumeChoices {
  """0 — 1%"""
  VOLUME_0_1

  """1 — 15%"""
  VOLUME_1_15

  """15 — 35%"""
  VOLUME_15_35

  """35 — 60%"""
  VOLUME_35_60

  """> 60%"""
  VOLUME_60
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataColorHueSubstepChoices {
  """2.5"""
  SUBSTEP_2_5

  """5"""
  SUBSTEP_5

  """7.5"""
  SUBSTEP_7_5

  """10"""
  SUBSTEP_10
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataColorHueChoices {
  """R"""
  R

  """YR"""
  YR

  """Y"""
  Y

  """GY"""
  GY

  """G"""
  G

  """B"""
  B

  """BG"""
  BG
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataColorValueChoices {
  """2.5"""
  VALUE_2_5

  """3"""
  VALUE_3

  """4"""
  VALUE_4

  """5"""
  VALUE_5

  """6"""
  VALUE_6

  """7"""
  VALUE_7

  """8"""
  VALUE_8

  """8.5"""
  VALUE_8_5

  """9"""
  VALUE_9

  """9.5"""
  VALUE_9_5
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataColorChromaChoices {
  """1"""
  CHROMA_1

  """2"""
  CHROMA_2

  """3"""
  CHROMA_3

  """4"""
  CHROMA_4

  """5"""
  CHROMA_5

  """6"""
  CHROMA_6

  """7"""
  CHROMA_7

  """8"""
  CHROMA_8
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

"""An enumeration."""
enum SoilIdDepthDependentSoilDataConductivityTestChoices {
  """Saturated Paste"""
  SATURATED_PASTE

  """1:1 soil/water"""
  SOIL_WATER_1_1

  """1:2 soil/water"""
  SOIL_WATER_1_2

  """Soil Contact Probe"""
  SOIL_CONTACT_PROBE

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataConductivityUnitChoices {
  """mS/cm"""
  MILLISIEMENS_CENTIMETER

  """mmhos/cm"""
  MILLIMHOS_CENTIMETER

  """µS/m"""
  MICROSIEMENS_METER

  """mS/m"""
  MILLISIEMENS_METER

  """dS/m"""
  DECISIEMENS_METER

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataStructureChoices {
  """Granular"""
  GRANULAR

  """Subangular Blocky"""
  SUBANGULAR_BLOCKY

  """Angular Blocky"""
  ANGULAR_BLOCKY

  """Lenticular"""
  LENTICULAR

  """Play"""
  PLAY

  """Wedge"""
  WEDGE

  """Prismatic"""
  PRISMATIC

  """Columnar"""
  COLUMNAR

  """Single Grain"""
  SINGLE_GRAIN

  """Massive"""
  MASSIVE
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataPhTestingSolutionChoices {
  """1:1 soil/water"""
  SOIL_WATER_1_1

  """1:2 soil/water"""
  SOIL_WATER_1_2

  """1:2.5 soil/water"""
  SOIL_WATER_1_2_5

  """1:5 soil/water"""
  SOIL_WATER_1_5

  """1:1 soil/0.1 M CaCL2"""
  SOIL_CACL2_1_1

  """1:2 soil/0.1 M CaCL2"""
  SOIL_CACL2_1_2

  """1:5 soil/0.1 M CaCL2"""
  SOIL_CACL2_1_5

  """1:1 soil/1.0 M KCL"""
  SOIL_KCL_1_1

  """1:2.5 soil/1.0 M KCL"""
  SOIL_KCL_1_2_5

  """1:5 soil/1.0 M KCL"""
  SOIL_KCL_1_5

  """Saturated Paste Extract"""
  SATURATED_PASTE_EXTRACT

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataPhTestingMethodChoices {
  """pH indicator strip"""
  INDICATOR_STRIP

  """pH indicator solution"""
  INDICATOR_SOLUTION

  """pH meter"""
  METER

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataSoilOrganicCarbonTestingChoices {
  """Dry Combustion"""
  DRY_COMBUSTION

  """Wet oxidation (Walkey—Black)"""
  WET_OXIDATION

  """Loss—on—ignition"""
  LOSS_ON_IGNITION

  """Reflectance Spectroscopy"""
  REFLECTANCE_SPECTROSCOPY

  """Field Reflectometer"""
  FIELD_REFLECTOMETER

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataSoilOrganicMatterTestingChoices {
  """Dry Combustion"""
  DRY_COMBUSTION

  """Wet oxidation (Walkey—Black)"""
  WET_OXIDATION

  """Loss—on—ignition"""
  LOSS_ON_IGNITION

  """Reflectance Spectroscopy"""
  REFLECTANCE_SPECTROSCOPY

  """Field Reflectometer"""
  FIELD_REFLECTOMETER

  """Other"""
  OTHER
}

"""An enumeration."""
enum SoilIdDepthDependentSoilDataCarbonatesChoices {
  """noneffervescent — No bubbles form"""
  NONEFFERVESCENT

  """very slightly effervescent — Few bubbles form"""
  VERY_SLIGHTLY_EFFERVESCENT

  """slightly effervescent — Numerous bubbles form"""
  SLIGHTLY_EFFERVESCENT

  """strongly effervescent — Bubbles form a low foam"""
  STRONGLY_EFFERVESCENT

  """violently effervescent — Bubbles rapidly form a thick foam"""
  VIOLENTLY_EFFERVESCENT
}

type ProjectSoilSettingsNode {
  project: ProjectNode!
  measurementUnits: SoilIdProjectSoilSettingsMeasurementUnitsChoices
  depthIntervalPreset: SoilIdProjectSoilSettingsDepthIntervalPresetChoices!
  soilPitRequired: Boolean!
  slopeRequired: Boolean!
  soilTextureRequired: Boolean!
  soilColorRequired: Boolean!
  verticalCrackingRequired: Boolean!
  carbonatesRequired: Boolean!
  phRequired: Boolean!
  soilOrganicCarbonMatterRequired: Boolean!
  electricalConductivityRequired: Boolean!
  sodiumAdsorptionRatioRequired: Boolean!
  soilStructureRequired: Boolean!
  landUseLandCoverRequired: Boolean!
  soilLimitationsRequired: Boolean!
  photosRequired: Boolean!
  notesRequired: Boolean!
  depthIntervals: [ProjectDepthIntervalNode!]!
}

"""An enumeration."""
enum SoilIdProjectSoilSettingsMeasurementUnitsChoices {
  """Imperial"""
  IMPERIAL

  """Metric"""
  METRIC
}

"""An enumeration."""
enum SoilIdProjectSoilSettingsDepthIntervalPresetChoices {
  """Landpks"""
  LANDPKS

  """Nrcs"""
  NRCS

  """None"""
  NONE

  """Custom"""
  CUSTOM
}

type ProjectDepthIntervalNode {
  project: ProjectNode!
  label: String!
  depthInterval: DepthInterval!
}

type ProjectNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `ProjectNode` and its cursor."""
type ProjectNodeEdge {
  """The item at the end of the edge"""
  node: ProjectNode!

  """A cursor for use in pagination"""
  cursor: String!
}

type AuditLogNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AuditLogNodeEdge!]!
  totalCount: Int!
}

"""A Relay edge containing a `AuditLogNode` and its cursor."""
type AuditLogNodeEdge {
  """The item at the end of the edge"""
  node: AuditLogNode!

  """A cursor for use in pagination"""
  cursor: String!
}

"""AuditLogNode is a node that represents an audit log"""
type AuditLogNode implements Node {
  clientTimestamp: DateTime!
  user: UserNode!
  event: AuditLogsLogEventChoices!
  resourceId: UUID!
  id: ID!
  metadata: GenericScalar!
  resourceJsonRepr: GenericScalar!
  resourceContentType: String!
}

"""An enumeration."""
enum AuditLogsLogEventChoices {
  """CREATE"""
  CREATE

  """READ"""
  READ

  """CHANGE"""
  CHANGE

  """DELETE"""
  DELETE
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Mutations {
  addGroup(input: GroupAddMutationInput!): GroupAddMutationPayload!
  addLandscape(input: LandscapeAddMutationInput!): LandscapeAddMutationPayload!
  addUser(input: UserAddMutationInput!): UserAddMutationPayload!
  addLandscapeGroup(input: LandscapeGroupAddMutationInput!): LandscapeGroupAddMutationPayload!
  addGroupAssociation(input: GroupAssociationAddMutationInput!): GroupAssociationAddMutationPayload!
  addMembership(input: MembershipAddMutationInput!): MembershipAddMutationPayload!
  updateGroup(input: GroupUpdateMutationInput!): GroupUpdateMutationPayload!
  updateLandscape(input: LandscapeUpdateMutationInput!): LandscapeUpdateMutationPayload!
  updateMembership(input: MembershipUpdateMutationInput!): MembershipUpdateMutationPayload!
  updateUser(input: UserUpdateMutationInput!): UserUpdateMutationPayload!
  deleteGroup(input: GroupDeleteMutationInput!): GroupDeleteMutationPayload!
  deleteLandscape(input: LandscapeDeleteMutationInput!): LandscapeDeleteMutationPayload!
  deleteUser(input: UserDeleteMutationInput!): UserDeleteMutationPayload!
  deleteLandscapeGroup(input: LandscapeGroupDeleteMutationInput!): LandscapeGroupDeleteMutationPayload!
  deleteGroupAssociation(input: GroupAssociationDeleteMutationInput!): GroupAssociationDeleteMutationPayload!
  deleteMembership(input: MembershipDeleteMutationInput!): MembershipDeleteMutationPayload!
  updateUserPreference(input: UserPreferenceUpdateInput!): UserPreferenceUpdatePayload!
  deleteUserPreference(input: UserPreferenceDeleteInput!): UserPreferenceDeletePayload!
  unsubscribeUser(input: UserUnsubscribeUpdateInput!): UserUnsubscribeUpdatePayload!
  addDataEntry(input: DataEntryAddMutationInput!): DataEntryAddMutationPayload!
  updateDataEntry(input: DataEntryUpdateMutationInput!): DataEntryUpdateMutationPayload!
  deleteDataEntry(input: DataEntryDeleteMutationInput!): DataEntryDeleteMutationPayload!
  addVisualizationConfig(input: VisualizationConfigAddMutationInput!): VisualizationConfigAddMutationPayload!
  updateVisualizationConfig(input: VisualizationConfigUpdateMutationInput!): VisualizationConfigUpdateMutationPayload!
  deleteVisualizationConfig(input: VisualizationConfigDeleteMutationInput!): VisualizationConfigDeleteMutationPayload!
  deleteStoryMap(input: StoryMapDeleteMutationInput!): StoryMapDeleteMutationPayload!
  saveStoryMapMembership(input: StoryMapMembershipSaveMutationInput!): StoryMapMembershipSaveMutationPayload!
  deleteStoryMapMembership(input: StoryMapMembershipDeleteMutationInput!): StoryMapMembershipDeleteMutationPayload!
  approveStoryMapMembership(input: StoryMapMembershipApproveMutationInput!): StoryMapMembershipApproveMutationPayload!
  approveStoryMapMembershipToken(input: StoryMapMembershipApproveTokenMutationInput!): StoryMapMembershipApproveTokenMutationPayload!
  addSite(input: SiteAddMutationInput!): SiteAddMutationPayload!
  updateSite(input: SiteUpdateMutationInput!): SiteUpdateMutationPayload!
  deleteSite(input: SiteDeleteMutationInput!): SiteDeleteMutationPayload!
  markSiteSeen(input: SiteMarkSeenMutationInput!): SiteMarkSeenMutationPayload!
  transferSites(input: SiteTransferMutationInput!): SiteTransferMutationPayload!
  addProject(input: ProjectAddMutationInput!): ProjectAddMutationPayload!
  updateProject(input: ProjectUpdateMutationInput!): ProjectUpdateMutationPayload!
  archiveProject(input: ProjectArchiveMutationInput!): ProjectArchiveMutationPayload!
  deleteProject(input: ProjectDeleteMutationInput!): ProjectDeleteMutationPayload!
  addUserToProject(input: ProjectAddUserMutationInput!): ProjectAddUserMutationPayload!
  deleteUserFromProject(input: ProjectDeleteUserMutationInput!): ProjectDeleteUserMutationPayload!
  updateUserRoleInProject(input: ProjectUpdateUserRoleMutationInput!): ProjectUpdateUserRoleMutationPayload!
  markProjectSeen(input: ProjectMarkSeenMutationInput!): ProjectMarkSeenMutationPayload!
  updateSoilData(input: SoilDataUpdateMutationInput!): SoilDataUpdateMutationPayload!
  updateDepthDependentSoilData(input: DepthDependentSoilDataUpdateMutationInput!): DepthDependentSoilDataUpdateMutationPayload!
  updateSoilDataDepthInterval(input: SoilDataUpdateDepthIntervalMutationInput!): SoilDataUpdateDepthIntervalMutationPayload!
  deleteSoilDataDepthInterval(input: SoilDataDeleteDepthIntervalMutationInput!): SoilDataDeleteDepthIntervalMutationPayload!
  updateProjectSoilSettings(input: ProjectSoilSettingsUpdateMutationInput!): ProjectSoilSettingsUpdateMutationPayload!
  updateProjectSoilSettingsDepthInterval(input: ProjectSoilSettingsUpdateDepthIntervalMutationInput!): ProjectSoilSettingsUpdateDepthIntervalMutationPayload!
  deleteProjectSoilSettingsDepthInterval(input: ProjectSoilSettingsDeleteDepthIntervalMutationInput!): ProjectSoilSettingsDeleteDepthIntervalMutationPayload!
}

type GroupAddMutationPayload {
  errors: GenericScalar
  group: GroupNode
  clientMutationId: String
}

input GroupAddMutationInput {
  name: String!
  description: String
  website: String
  email: String
  membershipType: String
  clientMutationId: String
}

type LandscapeAddMutationPayload {
  errors: GenericScalar
  landscape: LandscapeNode
  clientMutationId: String
}

input LandscapeAddMutationInput {
  name: String!
  description: String
  website: String
  location: String
  areaPolygon: JSONString
  email: String
  areaTypes: JSONString
  population: Int
  taxonomyTypeTerms: JSONString
  partnershipStatus: String
  groupAssociations: JSONString
  clientMutationId: String
}

type UserAddMutationPayload {
  errors: GenericScalar
  user: UserNode
  clientMutationId: String
}

input UserAddMutationInput {
  firstName: String
  lastName: String
  email: String!
  password: String!
  clientMutationId: String
}

type LandscapeGroupAddMutationPayload {
  errors: GenericScalar
  landscapeGroup: LandscapeGroupNode
  clientMutationId: String
}

input LandscapeGroupAddMutationInput {
  landscapeSlug: String!
  groupSlug: String!
  clientMutationId: String
}

type GroupAssociationAddMutationPayload {
  errors: GenericScalar
  groupAssociation: GroupAssociationNode
  clientMutationId: String
}

input GroupAssociationAddMutationInput {
  parentGroupSlug: String!
  childGroupSlug: String!
  clientMutationId: String
}

type MembershipAddMutationPayload {
  errors: GenericScalar
  membership: MembershipNode
  clientMutationId: String
}

input MembershipAddMutationInput {
  userEmail: String!
  groupSlug: String!
  userRole: String
  clientMutationId: String
}

type GroupUpdateMutationPayload {
  errors: GenericScalar
  group: GroupNode
  clientMutationId: String
}

input GroupUpdateMutationInput {
  id: ID!
  name: String
  description: String
  website: String
  email: String
  membershipType: String
  clientMutationId: String
}

type LandscapeUpdateMutationPayload {
  errors: GenericScalar
  landscape: LandscapeNode
  clientMutationId: String
}

input LandscapeUpdateMutationInput {
  id: ID!
  name: String
  description: String
  website: String
  location: String
  areaPolygon: JSONString
  email: String
  areaTypes: JSONString
  population: Int
  taxonomyTypeTerms: JSONString
  partnershipStatus: String
  groupAssociations: JSONString
  developmentStrategy: JSONString
  profileImage: String
  profileImageDescription: String
  clientMutationId: String
}

type MembershipUpdateMutationPayload {
  errors: GenericScalar
  membership: MembershipNode
  clientMutationId: String
}

input MembershipUpdateMutationInput {
  id: ID!
  userRole: String
  membershipStatus: String
  clientMutationId: String
}

type UserUpdateMutationPayload {
  errors: GenericScalar
  user: UserNode
  clientMutationId: String
}

input UserUpdateMutationInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: String
  clientMutationId: String
}

type GroupDeleteMutationPayload {
  errors: GenericScalar
  group: GroupNode
  clientMutationId: String
}

input GroupDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type LandscapeDeleteMutationPayload {
  errors: GenericScalar
  landscape: LandscapeNode
  clientMutationId: String
}

input LandscapeDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type UserDeleteMutationPayload {
  errors: GenericScalar
  user: UserNode
  clientMutationId: String
}

input UserDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type LandscapeGroupDeleteMutationPayload {
  errors: GenericScalar
  landscapeGroup: LandscapeGroupNode
  clientMutationId: String
}

input LandscapeGroupDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type GroupAssociationDeleteMutationPayload {
  errors: GenericScalar
  groupAssociation: GroupAssociationNode
  clientMutationId: String
}

input GroupAssociationDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type MembershipDeleteMutationPayload {
  errors: GenericScalar
  membership: MembershipNode
  clientMutationId: String
}

input MembershipDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type UserPreferenceUpdatePayload {
  errors: GenericScalar
  preference: UserPreferenceNode
  clientMutationId: String
}

input UserPreferenceUpdateInput {
  userEmail: String!
  key: String!
  value: String!
  clientMutationId: String
}

type UserPreferenceDeletePayload {
  errors: GenericScalar
  preference: UserPreferenceNode
  clientMutationId: String
}

input UserPreferenceDeleteInput {
  userEmail: String!
  key: String!
  clientMutationId: String
}

type UserUnsubscribeUpdatePayload {
  errors: GenericScalar
  success: Boolean
  clientMutationId: String
}

input UserUnsubscribeUpdateInput {
  token: String!
  clientMutationId: String
}

type DataEntryAddMutationPayload {
  errors: GenericScalar
  dataEntry: DataEntryNode
  clientMutationId: String
}

input DataEntryAddMutationInput {
  groupSlug: String!
  name: String!
  url: String!
  entryType: String!
  resourceType: String!
  description: String
  clientMutationId: String
}

type DataEntryUpdateMutationPayload {
  errors: GenericScalar
  dataEntry: DataEntryNode
  clientMutationId: String
}

input DataEntryUpdateMutationInput {
  id: ID!
  name: String
  description: String
  clientMutationId: String
}

type DataEntryDeleteMutationPayload {
  errors: GenericScalar
  dataEntry: DataEntryNode
  clientMutationId: String
}

input DataEntryDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type VisualizationConfigAddMutationPayload {
  errors: GenericScalar
  visualizationConfig: VisualizationConfigNode
  clientMutationId: String
}

input VisualizationConfigAddMutationInput {
  title: String!
  configuration: JSONString
  dataEntryId: ID!
  groupId: ID!
  clientMutationId: String
}

type VisualizationConfigUpdateMutationPayload {
  errors: GenericScalar
  visualizationConfig: VisualizationConfigNode
  clientMutationId: String
}

input VisualizationConfigUpdateMutationInput {
  id: ID!
  configuration: JSONString
  clientMutationId: String
}

type VisualizationConfigDeleteMutationPayload {
  errors: GenericScalar
  visualizationConfig: VisualizationConfigNode
  clientMutationId: String
}

input VisualizationConfigDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type StoryMapDeleteMutationPayload {
  errors: GenericScalar
  storyMap: StoryMapNode
  clientMutationId: String
}

input StoryMapDeleteMutationInput {
  id: ID
  clientMutationId: String
}

type StoryMapMembershipSaveMutationPayload {
  errors: GenericScalar
  memberships: [CollaborationMembershipNode]
  clientMutationId: String
}

input StoryMapMembershipSaveMutationInput {
  userRole: String
  userEmails: [String]!
  storyMapId: String!
  storyMapSlug: String!
  clientMutationId: String
}

type StoryMapMembershipDeleteMutationPayload {
  errors: GenericScalar
  membership: CollaborationMembershipNode
  clientMutationId: String
}

input StoryMapMembershipDeleteMutationInput {
  id: ID
  storyMapId: String!
  storyMapSlug: String!
  clientMutationId: String
}

type StoryMapMembershipApproveMutationPayload {
  errors: GenericScalar
  membership: CollaborationMembershipNode
  storyMap: StoryMapNode
  clientMutationId: String
}

input StoryMapMembershipApproveMutationInput {
  membershipId: String!
  clientMutationId: String
}

type StoryMapMembershipApproveTokenMutationPayload {
  errors: GenericScalar
  membership: CollaborationMembershipNode
  storyMap: StoryMapNode
  clientMutationId: String
}

input StoryMapMembershipApproveTokenMutationInput {
  inviteToken: String!
  clientMutationId: String
}

type SiteAddMutationPayload {
  errors: GenericScalar
  site: SiteNode!
  clientMutationId: String
}

input SiteAddMutationInput {
  name: String!
  latitude: Float!
  longitude: Float!
  privacy: ProjectManagementSitePrivacyChoices
  projectId: ID
  clientMutationId: String
}

type SiteUpdateMutationPayload {
  errors: GenericScalar
  site: SiteNode
  clientMutationId: String
}

input SiteUpdateMutationInput {
  id: ID!
  name: String
  latitude: Float
  longitude: Float
  privacy: ProjectManagementSitePrivacyChoices
  projectId: ID
  clientMutationId: String
}

type SiteDeleteMutationPayload {
  errors: GenericScalar
  site: SiteNode!
  clientMutationId: String
}

input SiteDeleteMutationInput {
  id: ID!
  clientMutationId: String
}

type SiteMarkSeenMutationPayload {
  errors: GenericScalar
  site: SiteNode!
  clientMutationId: String
}

input SiteMarkSeenMutationInput {
  id: ID!
  clientMutationId: String
}

type SiteTransferMutationPayload {
  errors: GenericScalar
  updated: [TransferredSite!]!
  notFound: [ID!]!
  badPermissions: [SiteNode!]!
  project: ProjectNode!
  clientMutationId: String
}

type TransferredSite {
  oldProject: ProjectNode
  site: SiteNode!
}

input SiteTransferMutationInput {
  siteIds: [ID!]!
  projectId: ID!
  clientMutationId: String
}

type ProjectAddMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  clientMutationId: String
}

input ProjectAddMutationInput {
  name: String!
  privacy: ProjectPrivacy!
  description: String
  clientMutationId: String
}

enum ProjectPrivacy {
  PRIVATE
  PUBLIC
}

type ProjectUpdateMutationPayload {
  errors: GenericScalar
  project: ProjectNode
  clientMutationId: String
}

input ProjectUpdateMutationInput {
  id: ID!
  name: String
  privacy: ProjectPrivacy = null
  description: String
  clientMutationId: String
}

type ProjectArchiveMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  clientMutationId: String
}

input ProjectArchiveMutationInput {
  id: ID!
  archived: Boolean!
  clientMutationId: String
}

type ProjectDeleteMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  clientMutationId: String
}

input ProjectDeleteMutationInput {
  id: ID!
  transferProjectId: ID
  clientMutationId: String
}

type ProjectAddUserMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  membership: ProjectMembershipNode!
  clientMutationId: String
}

input ProjectAddUserMutationInput {
  projectId: ID!
  userId: ID!
  role: UserRole!
  clientMutationId: String
}

type ProjectDeleteUserMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  membership: ProjectMembershipNode!
  clientMutationId: String
}

input ProjectDeleteUserMutationInput {
  projectId: ID!
  userId: ID!
  clientMutationId: String
}

type ProjectUpdateUserRoleMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  membership: ProjectMembershipNode!
  clientMutationId: String
}

input ProjectUpdateUserRoleMutationInput {
  projectId: ID!
  userId: ID!
  newRole: UserRole!
  clientMutationId: String
}

type ProjectMarkSeenMutationPayload {
  errors: GenericScalar
  project: ProjectNode!
  clientMutationId: String
}

input ProjectMarkSeenMutationInput {
  id: ID!
  clientMutationId: String
}

type SoilDataUpdateMutationPayload {
  errors: GenericScalar
  soilData: SoilDataNode
  clientMutationId: String
}

input SoilDataUpdateMutationInput {
  siteId: ID!
  downSlope: SoilIdSoilDataDownSlopeChoices
  crossSlope: SoilIdSoilDataCrossSlopeChoices
  bedrock: Int
  slopeLandscapePosition: SoilIdSoilDataSlopeLandscapePositionChoices
  slopeAspect: Int
  slopeSteepnessSelect: SoilIdSoilDataSlopeSteepnessSelectChoices
  slopeSteepnessPercent: Int
  slopeSteepnessDegree: Int
  surfaceCracksSelect: SoilIdSoilDataSurfaceCracksSelectChoices
  surfaceSaltSelect: SoilIdSoilDataSurfaceSaltSelectChoices
  floodingSelect: SoilIdSoilDataFloodingSelectChoices
  limeRequirementsSelect: SoilIdSoilDataLimeRequirementsSelectChoices
  surfaceStoninessSelect: SoilIdSoilDataSurfaceStoninessSelectChoices
  waterTableDepthSelect: SoilIdSoilDataWaterTableDepthSelectChoices
  soilDepthSelect: SoilIdSoilDataSoilDepthSelectChoices
  landCoverSelect: SoilIdSoilDataLandCoverSelectChoices
  grazingSelect: SoilIdSoilDataGrazingSelectChoices
  clientMutationId: String
}

type DepthDependentSoilDataUpdateMutationPayload {
  errors: GenericScalar
  soilData: SoilDataNode
  clientMutationId: String
}

input DepthDependentSoilDataUpdateMutationInput {
  siteId: ID!
  depthInterval: DepthIntervalInput!
  texture: SoilIdDepthDependentSoilDataTextureChoices
  rockFragmentVolume: SoilIdDepthDependentSoilDataRockFragmentVolumeChoices
  colorHueSubstep: SoilIdDepthDependentSoilDataColorHueSubstepChoices
  colorHue: SoilIdDepthDependentSoilDataColorHueChoices
  colorValue: SoilIdDepthDependentSoilDataColorValueChoices
  colorChroma: SoilIdDepthDependentSoilDataColorChromaChoices
  conductivity: Decimal
  conductivityTest: SoilIdDepthDependentSoilDataConductivityTestChoices
  conductivityUnit: SoilIdDepthDependentSoilDataConductivityUnitChoices
  structure: SoilIdDepthDependentSoilDataStructureChoices
  ph: Decimal
  phTestingSolution: SoilIdDepthDependentSoilDataPhTestingSolutionChoices
  phTestingMethod: SoilIdDepthDependentSoilDataPhTestingMethodChoices
  soilOrganicCarbon: Decimal
  soilOrganicMatter: Decimal
  soilOrganicCarbonTesting: SoilIdDepthDependentSoilDataSoilOrganicCarbonTestingChoices
  soilOrganicMatterTesting: SoilIdDepthDependentSoilDataSoilOrganicMatterTestingChoices
  sodiumAbsorptionRatio: Decimal
  carbonates: SoilIdDepthDependentSoilDataCarbonatesChoices
  clientMutationId: String
}

input DepthIntervalInput {
  start: Int!
  end: Int!
}

type SoilDataUpdateDepthIntervalMutationPayload {
  errors: GenericScalar
  soilData: SoilDataNode
  clientMutationId: String
}

input SoilDataUpdateDepthIntervalMutationInput {
  siteId: ID!
  label: String
  depthInterval: DepthIntervalInput!
  soilTextureEnabled: Boolean
  soilColorEnabled: Boolean
  carbonatesEnabled: Boolean
  phEnabled: Boolean
  soilOrganicCarbonMatterEnabled: Boolean
  electricalConductivityEnabled: Boolean
  sodiumAdsorptionRatioEnabled: Boolean
  soilStructureEnabled: Boolean
  clientMutationId: String
}

type SoilDataDeleteDepthIntervalMutationPayload {
  errors: GenericScalar
  soilData: SoilDataNode
  clientMutationId: String
}

input SoilDataDeleteDepthIntervalMutationInput {
  siteId: ID!
  depthInterval: DepthIntervalInput!
  clientMutationId: String
}

type ProjectSoilSettingsUpdateMutationPayload {
  errors: GenericScalar
  projectSoilSettings: ProjectSoilSettingsNode
  clientMutationId: String
}

input ProjectSoilSettingsUpdateMutationInput {
  projectId: ID!
  measurementUnits: SoilIdProjectSoilSettingsMeasurementUnitsChoices
  depthIntervalPreset: SoilIdProjectSoilSettingsDepthIntervalPresetChoices
  soilPitRequired: Boolean
  slopeRequired: Boolean
  soilTextureRequired: Boolean
  soilColorRequired: Boolean
  verticalCrackingRequired: Boolean
  carbonatesRequired: Boolean
  phRequired: Boolean
  soilOrganicCarbonMatterRequired: Boolean
  electricalConductivityRequired: Boolean
  sodiumAdsorptionRatioRequired: Boolean
  soilStructureRequired: Boolean
  landUseLandCoverRequired: Boolean
  soilLimitationsRequired: Boolean
  photosRequired: Boolean
  notesRequired: Boolean
  clientMutationId: String
}

type ProjectSoilSettingsUpdateDepthIntervalMutationPayload {
  errors: GenericScalar
  projectSoilSettings: ProjectSoilSettingsNode
  clientMutationId: String
}

input ProjectSoilSettingsUpdateDepthIntervalMutationInput {
  projectId: ID!
  label: String
  depthInterval: DepthIntervalInput!
  clientMutationId: String
}

type ProjectSoilSettingsDeleteDepthIntervalMutationPayload {
  errors: GenericScalar
  projectSoilSettings: ProjectSoilSettingsNode
  clientMutationId: String
}

input ProjectSoilSettingsDeleteDepthIntervalMutationInput {
  projectId: ID!
  depthInterval: DepthIntervalInput!
  clientMutationId: String
}
